import java.awt.Point;
import java.util.ArrayList;


/**
 * This class is an abstract representation of a path generated by pathFinder 
 * that uses arraylist.
 * Theoretically, all the methods can be done without making this new class.
 * However, doing so can avoid confusion between the path and other data 
 * similar data structures used in the game logic.
 * 
 * @author Zheyuan Liu
 *
 */
public class Path {
	private ArrayList<Point> path;
	
	/**
	 * Initialize an empty structure
	 */
	public Path(){
		this.path = new ArrayList<Point>();
	}
	
	/**
	 * @return size of the arraylist
	 */
	public int getLength(){
		return path.size();
	}
	
	/**
	 * @param num_of_step
	 * @return the x component of a point at a specific step
	 */
	public int getX(int num_of_step){
		return path.get(num_of_step).x;
	}
	
	/**
	 * @param num_of_step
	 * @return the y component of a point at a specific step
	 */
	public int getY(int num_of_step){
		return path.get(num_of_step).y;
	}
	
	/**
	 * append a step to a path
	 * @param new_step
	 */
	public void appendStep(Point new_step){
		path.add(new_step);
	}
	
	/**
	 * prepend a step to a path
	 * @param new_step
	 */
	public void prependStep(Point new_step){
		path.add(0, new_step);
	}
	
	/**
	 * test if a given step is already included
	 * @param new_step
	 * @return
	 */
	public boolean contains(Point new_step){
		return path.contains(new_step);
		
	}
	
	/**
	 * @param current_step
	 * @return the next point (index pair) in the path
	 */
	public Point getNext(Point current_step){
		int i = path.indexOf(current_step);
		if(i < path.size() - 1){
			return path.get(i+1);
		}
		else{
			return null;
		}
		
	}
	
	/**
	 * 
	 * @param current_step
	 * @return if the current step is the last step
	 */
	public boolean hasNext(Point current_step){
		if(path.size() == 0){
			return false;
		}
		else{
			return path.indexOf(current_step) != path.size()-1;
		}
		
	}
	/**
	 * @param p
	 * @return if a player is on the path
	 */
	public boolean isOnPath(Point p){
		return path.indexOf(p) != -1;
	}
	
}
